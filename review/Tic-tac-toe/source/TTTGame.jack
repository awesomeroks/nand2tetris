class TTTGame {
   field Array table_movements; //Store the players' movements.
   field int current_player, current_move;
   field Table table;
   field boolean finished;
                     
   //Creates a new Game   
   constructor TTTGame new() {
      let table = Table.new(256, 128);
      return this;
   }
   
   //Game's start setup.
   method void start_game() {   
      var int pos;
      if (~(table_movements = null)) {
          do table_movements.dispose();
      }      
      let table_movements = Array.new(9);
      let pos = 0;
      while (pos < 9) {
          let table_movements[pos] = 0;
          let pos = pos + 1;
      }
      let finished = false;
      let current_move = 9;
      let current_player = 1;
      do Screen.clearScreen();  
      do table.draw_table();
      do player_round();
      return;
   }
   
   // Disposes this game.
   method void dispose() {
      do table_movements.dispose();
      do table.dispose();
      do Memory.deAlloc(this);
      return;
   }

   //Checks if the movement is valid.
   method boolean move(int position) {
      if (table_movements[position] = 0) {
          let table_movements[position] = current_player;
          return true;
      }
      return false;
   }
   
   //Checks if there are more available movements. 
   method boolean has_move() {
      var int pos;
      let pos = 0;
      
      while (pos < 9) {
          if (table_movements[pos] = 0) {
              return true;
          }
          let pos = pos + 1;
      } 
      
      return false;
   }
   
   //Checks if the current player wins the game. 
   method boolean is_victory() {
   
      var int col, lin; 
      let col = 0;
      let lin = 0;
      
      while (lin < 3) {
          if (table_movements[0 + (3 * lin)] = current_player & 
              table_movements[1 + (3 * lin)] = current_player & 
              table_movements[2 + (3 * lin)] = current_player) {
              return true;
          }
          let lin = lin + 1;
      } 
      
      while (col < 3) {
          if (table_movements[0 + col] = current_player & 
              table_movements[3 + col] = current_player & 
              table_movements[6 + col] = current_player) {
              return true;
          }
          let col = col + 1;
      } 

      
      if (table_movements[0] = current_player & 
          table_movements[4] = current_player & 
          table_movements[8] = current_player){
          return true;
      }      

      if (table_movements[2] = current_player & 
          table_movements[4] = current_player & 
          table_movements[6] = current_player){
          return true;
      }      

      return false;
   }
   
   //Prints the current player round message.
   method void player_round() {
       do Output.moveCursor(0, 0);
       do Output.printString("Player ");
       do Output.printInt(current_player);
       do Output.printString("'s round! [Choise a number between 1 and 9]");
       return;
   }
   
   //Prints a 'try again' message.
   method void try_again() {
      do Output.moveCursor(10, 0);
      do Output.printString("INVALID MOVIMENT!!!");
      do Output.moveCursor(11, 0);
      do Output.printString("TRY AGAIN!!!");
      do Sys.wait(5000);
      do Output.moveCursor(10, 0);
      do Output.printString("                   ");
      do Output.moveCursor(11, 0);
      do Output.printString("            "); 
      return;
   }
   
   //Prints the winning player message.
   method void current_player_wins() {
      do Output.moveCursor(11, 0);                 
      do Output.printString("Player ");
      do Output.printInt(current_player);
      do Output.printString(" wins!!");
      return;
   }
   
   //Prints the tie game message.
   method void tie_game() {
      do Output.moveCursor(11, 0);
      do Output.printString("A tie!");
      return;
   }
   
   //Prints the restart game messagem.
   method void restart_game_message() {
      do Output.moveCursor(22, 0);
      do Output.printString("Press 'R' to restart!");
      return;
   }
   
   //Executes the game.
   method void run() {
      var char key;  
      var boolean valid_move;
      do start_game();

      
      while (true) {
         
         while (key = 0) {
            let key = Keyboard.keyPressed();
         }
        
         if (key = 49) { let current_move = 0;}
         if (key = 50) { let current_move = 1;}
         if (key = 51) { let current_move = 2;}
         if (key = 52) { let current_move = 3;}
         if (key = 53) { let current_move = 4;}
         if (key = 54) { let current_move = 5;}
         if (key = 55) { let current_move = 6;}
         if (key = 56) { let current_move = 7;}
         if (key = 57) { let current_move = 8;}
                  
         if((~finished) & (current_move < 9)) {

             let valid_move = move(current_move);
                 
             if (valid_move) {
                 do table.draw_move(current_move, current_player);
                 let current_move = 9;
                 let finished = is_victory();
                 if (finished) {
                     do current_player_wins();
                 } else {
                     let finished = ~has_move();
                     if (finished) {
                        do tie_game(); 
                     }
                 }
                 
                 if (finished) {
                     do restart_game_message();
                 }
                     
                 if (~finished) {
                     if (current_player = 1) {
                         let current_player = 2;
                     } else {
                         let current_player = 1;
                     }
                     do player_round();
                 }
             } else {
                 do try_again();             
             }
         }	 
	 
	 if (finished & (key = 82)) {
	     do start_game();
	 }
	 
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
         }
      }      
      return;
   }
}



